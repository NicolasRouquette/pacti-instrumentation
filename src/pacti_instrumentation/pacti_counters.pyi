from _typeshed import Incomplete
from pacti.contracts import PolyhedralIoContract, PolyhedralIoContractCompound
from pacti.terms.polyhedra import PolyhedralTermList
from typing import Any, Callable, Dict, List, Optional, Tuple

class PolyhedralContractSize:
    constraints: int
    variables: int
    def __init__(self, contract: Optional[PolyhedralIoContract], max_values: bool = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: PolyhedralContractSize) -> bool: ...
    def max(self, other: PolyhedralContractSize) -> PolyhedralContractSize: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...

class ContractWrapper:
    fn: Incomplete
    counter: int
    min_size: Incomplete
    max_size: Incomplete
    def __init__(self, fn: Callable[..., PolyhedralIoContract]) -> None: ...
    def __call__(self, instance: PolyhedralIoContract, *args: Tuple[PolyhedralIoContract], **kwargs: Dict[str, Any]) -> PolyhedralIoContract: ...
    def reset(self) -> None: ...

def contract_statistics_decorator(fn: Callable[..., PolyhedralIoContract]) -> Callable[..., PolyhedralIoContract]: ...

class PolyhedralTermListSize:
    terms: int
    variables: int
    def __init__(self, termlist: Optional[PolyhedralTermList], max_values: bool = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: PolyhedralTermListSize) -> bool: ...
    def max(self, other: PolyhedralTermListSize) -> PolyhedralTermListSize: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...

class TermListWrapper:
    fn: Incomplete
    counter: int
    min_size: Incomplete
    max_size: Incomplete
    def __init__(self, fn: Callable[..., bool]) -> None: ...
    def __call__(self, instance: PolyhedralTermList, *args: Tuple, **kwargs: Dict[str, Any]) -> bool: ...
    def reset(self) -> None: ...

def termlist_statistics_decorator(fn: Callable[..., bool]) -> Callable[..., bool]: ...

class PolyhedralContractCompoundSize:
    convex_polyhedra_count: int
    variables: int
    def __init__(self, contract: Optional[PolyhedralIoContractCompound], max_values: bool = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: PolyhedralContractCompoundSize) -> bool: ...
    def max(self, other: PolyhedralContractCompoundSize) -> PolyhedralContractCompoundSize: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...

class CompoundContractWrapper:
    fn: Incomplete
    counter: int
    min_size: Incomplete
    max_size: Incomplete
    def __init__(self, fn: Callable[..., PolyhedralIoContractCompound]) -> None: ...
    def __call__(self, instance: PolyhedralIoContractCompound, *args: Tuple[PolyhedralIoContractCompound], **kwargs: Dict[str, Any]) -> PolyhedralIoContractCompound: ...
    def reset(self) -> None: ...

def compound_contract_statistics_decorator(fn: Callable[..., PolyhedralIoContractCompound]) -> Callable[..., PolyhedralIoContractCompound]: ...

class PactiInstrumentationData:
    compose_count: int
    quotient_count: int
    merge_count: int
    contains_behavior_count: int
    compound_merge_count: int
    compose_min_size: PolyhedralContractSize
    quotient_min_size: PolyhedralContractSize
    merge_min_size: PolyhedralContractSize
    contains_behavior_min_size: PolyhedralTermListSize
    compound_merge_min_size: PolyhedralContractCompoundSize
    compose_max_size: PolyhedralContractSize
    quotient_max_size: PolyhedralContractSize
    merge_max_size: PolyhedralContractSize
    contains_behavior_max_size: PolyhedralTermListSize
    compound_merge_max_size: PolyhedralContractCompoundSize
    def reset(self) -> None: ...
    def update_counts(self) -> PactiInstrumentationData: ...
    def __add__(self, other: PactiInstrumentationData) -> PactiInstrumentationData: ...
    def __init__(self, compose_count, quotient_count, merge_count, contains_behavior_count, compound_merge_count, compose_min_size, quotient_min_size, merge_min_size, contains_behavior_min_size, compound_merge_min_size, compose_max_size, quotient_max_size, merge_max_size, contains_behavior_max_size, compound_merge_max_size) -> None: ...

class PactiInstrumentationSummary:
    min_compose: int
    min_quotient: int
    min_merge: int
    min_contains_behavior: int
    min_compound_merge: int
    max_compose: int
    max_quotient: int
    max_merge: int
    max_contains_behavior: int
    max_compound_merge: int
    total_compose: int
    total_quotient: int
    total_merge: int
    total_contains_behavior: int
    total_compound_merge: int
    avg_compose: float
    avg_quotient: float
    avg_merge: float
    avg_contains_behavior: float
    avg_compound_merge: float
    compose_min_size: PolyhedralContractSize
    quotient_min_size: PolyhedralContractSize
    merge_min_size: PolyhedralContractSize
    contains_behavior_min_size: PolyhedralTermListSize
    compound_merge_min_size: PolyhedralContractCompoundSize
    compose_max_size: PolyhedralContractSize
    quotient_max_size: PolyhedralContractSize
    merge_max_size: PolyhedralContractSize
    contains_behavior_max_size: PolyhedralTermListSize
    compound_merge_max_size: PolyhedralContractCompoundSize
    def __add__(self, other: PactiInstrumentationSummary) -> PactiInstrumentationSummary: ...
    def stats(self) -> str: ...
    def __init__(self, min_compose, min_quotient, min_merge, min_contains_behavior, min_compound_merge, max_compose, max_quotient, max_merge, max_contains_behavior, max_compound_merge, total_compose, total_quotient, total_merge, total_contains_behavior, total_compound_merge, avg_compose, avg_quotient, avg_merge, avg_contains_behavior, avg_compound_merge, compose_min_size, quotient_min_size, merge_min_size, contains_behavior_min_size, compound_merge_min_size, compose_max_size, quotient_max_size, merge_max_size, contains_behavior_max_size, compound_merge_max_size) -> None: ...

def summarize_instrumentation_data(counts: List[PactiInstrumentationData]) -> PactiInstrumentationSummary: ...
